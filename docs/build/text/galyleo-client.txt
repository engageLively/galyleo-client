[image]


The Galyleo Python Client
*************************

The Galyleo Python client is a module designed to convert Python
structures into Galyleo Tables, and send them to dashboards for use
with the Galyleo editor.  It consists of four components:

* galyleo.galyleo_table: classes and methods to create GalyleoTables,
  convert Python data structures into them, and produce and read JSON
  versions of the tables.

* galyleo.galyleo_jupyterlab_client: classes and methods to send
  Galyleo Tables to Galyleo dashboards runniung under JupyterLab
  clients

* galyleo.galyleo_constants: Symbolic constants used by these packages
  and the code which uses them

* galyleo.galyleo_exceptions; Exceptions thrown by the package


Installation
============

The galyleo module can be installed using "pip":

   pip install --extra-index-url https://pypi.engagelively.com galyleo

When the module is more thoroughly tested, it will be put on the
standard pypi servers.


License
=======

"galyleo" is released under a standard BSD 3-Clause licence by
engageLively


Galyleo Table
=============

class galyleo.galyleo_table.GalyleoTable(name: str)

   A Galyleo Dashboard Table.  Used to create a Galyleo Dashboard
   Table from any of a number of sources, and then generate an object
   that is suitable for storage (as a JSON file).  A GalyleoTable is
   very similar to  a Google Visualization data table, and can be
   converted to a Google Visualization Data Table on either the Python
   or the JavaScript side. Convenience routines provided here to
   import data from pandas, and json format.

   aggregate_by(aggregate_column_names, new_column_name='count', new_table_name=None)

      Create a new table by aggregating over multiple columns.  The
      resulting table contains the aggregate column names and the new
      column name, and for each unique combination of values among the
      aggregate column names, the count of rows in this table with
      that unique combination of values. The new table will have name
      new_table_name Throws an InvalidDataException if
      aggregate_column_names is not a subset of the names in
      self.schema

      Args:
         aggregate_column_names: names of the  columns to aggregate
         over new_column_name: name of the column for the aggregate
         count.  Defaults to count new_table_name: name of the new
         table.  If omitted, defaults to None, in which case a name
         will be generated

      Returns:
         A new table with name new_table_name, or a generated name if
         new_table_name == None

      Throws:
         InvalidDataException if one of the column names is missing

   as_dictionary()

      Return the form of the table as a dictionary.  This is a
      dictionary of the form: {“name”: <table_name>,”table”:
      <table_struct>}  where table_struct is of the form: {“columns”:
      [<list of schema records],”rows”: [<list of rows of the table>]}

      A schema record is a record of the form: {“name”: <
      column_name>, “type”: <column_type}, where type is one of the
      Galyleo types (GALYLEO_STRING, GALYLEO_NUMBER, GALYLEO_BOOLEAN,
      GALYLEO_DATE, GALYLEO_DATETIME, GALYLEO_TIME_OF_DAY).  All of
      these are defined in galyleo_constants.

      Args:
         None

      Returns:
         {“name”: <table_name>, “table”: {“columns”: <list of schema
         records], “rows”: [<list of rows of the table>]}}

   equal(table, names_must_match=False)

      Test to see if this table is equal to another table, passed as
      an argument.  Two tables are equal if their schemas are the same
      length and column names and types match, and if the data is the
      same, and in the same order.  If names_must_match == True
      (default is False), then the names must also match

      Args:
         table (GalyleoTable): table to be checked for equality
         names_must_match (bool): (default False) if True, table names
         must also match

      Returns:
         True if equal, False otherwise

   filter_by_function(column_name, function, new_table_name, column_types={})

      Create a new table, with name table_name, with rows such that
      function(row[column_name]) == True.  The new table will have
      columns {self.columns} - {column_name}, same types, and same
      order Throws an InvalidDataException if: 1. new_table_name is
      None or not a string 2. column_name is not a name of an existing
      column 3. if column_types is not empty, the type of the selected
      column doesn’t match one of the allowed types

      Args:
         column_name: the column to filter by function: a Boolean
         function with a single argument of the type of
         columns[column_name] new_table_name: name of the new table
         column_types: set of the allowed column types; if empty, any
         type is permitted

      Returns:
         A table with column[column_name] missing and filtered

      Throws:
         InvalidDataException if new_table_name is empty, column_name
         is not a name of an existing column, or the type of
         column_name isn’t in column_types (if column_types is non-
         empty)

   filter_equal(column_name, value, new_table_name, column_types)

      A convenience method over filter_by_function.  This is identical
      to filter_by_function(column_name, lambda x: x == value,
      new_table_name, column_types)

      Args:
         column_name: the column to filter by value: the value to
         march for equality new_table_name: name of the new table
         column_types: set of the allowed column types; if empty, any
         type is permitted

      Returns:
            A table with column[column_name] missing and filtered

         Throws:
            InvalidDataException if new_table_name is empty,
            column_name is not a name of an existing column, or the
            type of column_name isn’t in column_types (if column_types
            is non-empty)

   filter_range(column_name, range_as_tuple, new_table_name, column_types)

      A convenience method over filter_by_function.  This is identical
      to filter_by_function(column_name, lambda x: x >=
      range_as_tuple[0], x <= range_as_tuple[1], new_table_name,
      column_types)

      Args:
         column_name: the column to filter by range_as_tuple: the
         tuple representing the range new_table_name: name of the new
         table column_types: set of the allowed column types; if
         empty, any type is permitted

      Returns:
            A table with column[column_name] missing and filtered

         Throws:
            InvalidDataException if new_table_name is empty,
            column_name is not a name of an existing column, or the
            type of column_name isn’t in column_types (if column_types
            is non-empty), if len(range_as_tuple) != 2

   from_json(json_form, overwrite_name=True)

      Load the table from a JSON string, of the form produced by
      toJSON().  Note that if the overwrite_name parameter = True (the
      default), this will also overwrite the table name.

      Throws InvalidDataException id json_form is malformed

      Args:
         json_form: A JSON form of the Dictionary

      Returns:
         None

      Throws:
         InvalidDataException if json_form is malformed

   load_from_dataframe(dataframe, schema=None)

      Load from a Pandas Dataframe.  The schema is given in the
      optional second parameter, as a list of records {“name”: <name>,
      “type”: <type>}, where type is a Galyleo type. (GALYLEO_STRING,
      GALYLEO_NUMBER, GALYLEO_BOOLEAN, GALYLEO_DATE, GALYLEO_DATETIME,
      GALYLEO_TIME_OF_DAY).  If the second parameter is not present,
      the schema is derived from the name and column types of the
      dataframe, and each row of the dataframe becomes a row of the
      table.

      Args:

         dataframe (pandas dataframe): the pandas dataframe to load
         from schema (list of dictionaries): if present, the schema in
         list of dictionary form; each dictionary is of the form
         {“name”: <column name>, “type”: <column type>}

   load_from_dictionary(dict)

      load data from a dictionary of the form: {“columns”: [<list of
      schema records], “rows”: [<list of rows of the table>]}

      A schema record is a record of the form: {“name”: <
      column_name>, “type”: <column_type}, where type is one of the
      Galyleo types (GALYLEO_STRING, GALYLEO_NUMBER, GALYLEO_BOOLEAN,
      GALYLEO_DATE, GALYLEO_DATETIME, GALYLEO_TIME_OF_DAY).

      Throws InvalidDataException if the dictionary is of the wrong
      format or the rows don’t match the columns.

      Args:
         dict: the table as a dictionary (a value returned by
         as_dictionary)

      Throws:
         InvalidDataException if dict is malformed

   load_from_schema_and_data(schema: list, data: list)

      Load from a pair (schema, data). Schema is a list of pairs
      [(<column_name>, <column_type>)] where column_type is one of the
      Galyleo types (GALYLEO_STRING, GALYLEO_NUMBER, GALYLEO_BOOLEAN,
      GALYLEO_DATE, GALYLEO_DATETIME, GALYLEO_TIME_OF_DAY).  All of
      these are defined in galyleo_constants.  data is a list of
      lists, where each list is a row of  the table.  Two conditions:

      1. Each type must be one of types listed above

      2. Each list in data must have the same length as the schema,
         and the type of each element must match the corresponding
         schema type

      throws an InvalidDataException if either of these are violated

      Args:
         schema (list of pairs, (name, type)): the schema as a list of
         pairs data (list of lists): the data as a list of lists

   pivot_on_column(pivot_column_name, value_column_name, new_table_name, pivot_column_values={}, other_column=False)

      The pivot_on_column method breaks out value_column into n
      separate columns, one for each member of pivot_column_values
      plus (if other_column = True), an “Other” column.  This is
      easiest to see with an example.  Consider a table with columns
      (Year, State, Party, Percentage).  pivot_on_column(‘Party’,
      {‘Republican’, ‘Democratic’}, ‘Percentage’, ‘pivot_table’,
      False) would create a new table with columns Year, State,
      Republican, Democratic, where the values in the Republican and
      Democratic columns are the  values in the Percentage column
      where the Party column value was Republican or Democratic,
      respectively.  If Other = True, an additional column, Other, is
      found where the value is (generally) the sum of values where
      Party not equal Republican or Democratic

      Args:
         pivot_column_name: the column holding the keys to pivot on
         value_column_name: the column holding the values to spread
         out over the pivots new_table_name: name of the new table
         pivot_column_values: the values to pivot on.  If empty, all
         values used other_column: if True, aggregate other values
         into a column

      Returns:
            A table as described in the comments above

         Throws:
            InvalidDataException if new_table_name is empty,
            pivot_column_name is not a name of an existing column, or
            value_column_name is not the name of an existing column

   to_json()

      Return the table as a JSON string, suitable for transmitting as
      a message or saving to a file.  This is just a JSON form of the
      dictionary form of the string.  (See as_dictionary)

      Returns:
         as_dictionary() as a JSON string

class galyleo.galyleo_table.RemoteGalyleoTable(name: str, schema, base_url: str, header_variables=[])

   A Remote Galyleo Table: This is instantiated with an URL which
   tells the  dashboard where to get the data.  Note that this is much
   simpler than an explicit GalyleoTable, since the data manipulation
   is all done by the remote server.

   as_dictionary()

      Return the form of the table as a dictionary.  This is a
      dictionary of the form: {“name”: <table_name>,”table”:
      <table_struct>}  where table_struct is of the form: {“columns”:
      [<list of schema records], “base_url”: base_url,
      “header_variables”: list of header variables}

      A schema record is a record of the form: {“name”: <
      column_name>, “type”: <column_type}, where type is one of the
      Galyleo types (GALYLEO_STRING, GALYLEO_NUMBER, GALYLEO_BOOLEAN,
      GALYLEO_DATE, GALYLEO_DATETIME, GALYLEO_TIME_OF_DAY).  All of
      these are defined in galyleo_constants.

      Args:
         None

      Returns:
         {“name”: <table_name>, “table”: {“columns”: <list of schema
         records], “base_url”: base_url, “header_variables”: list of
         header variables}}

   to_json()

      Return the table as a JSON string, suitable for transmitting as
      a message or saving to a file.  This is just a JSON form of the
      dictionary form of the string.  (See as_dictionary)

      Returns:
         as_dictionary() as a JSON string


JupyterLab Client
=================

class galyleo.galyleo_jupyterlab_client.GalyleoClient

   The Dashboard Client.  This is the client which sends the tables to
   the dashboard and handles requests coming from the dashboard for
   tables.

   send_data_to_dashboard(galyleo_table, dashboard_name: Optional[str] = None) -> None

      The routine to send a GalyleoTable to the dashboard, optionally
      specifying a specific  dashboard to send the data to.  If None
      is specified, sends to all the dashboards. The table must not
      have more than galyleo_constants.MAX_NUMBER_ROWS, nor be (in
      JSON form) > galyleo_constants.MAX_DATA_SIZE.  If either of
      these conditions apply, a DataSizeExceeded exception is thrown.
      NOTE: this sends data to one or more open dashboard editors in
      JupyterLab.  If there are no dashboard editors open, it will
      have no effect.

      Args:
         galyleo_table: the table to send to the dashboard
         dashboard_name: name of the dashboard editor to send it to
         (if None, sent to all)


Galyleo Exceptions
==================

Galyleo specific exceptions

exception galyleo.galyleo_exceptions.DataSizeExceeded

   Raised when the data volume is too large on a single request. The
   exact limitations are specified in README.md and in
   galyleo_constants

exception galyleo.galyleo_exceptions.DataSizeIsZero

   Raised when the data set is empty.

exception galyleo.galyleo_exceptions.Error

   Base class for other exceptions.

exception galyleo.galyleo_exceptions.InvalidDataException

   An exception thrown when a data table (list of rows) doesn’t match
   an accoompanying schema, or a bad schema is specified, or a table
   row is the wrong length, or..


Galyleo Constants
=================

Constants that are used throughout the module.  These include:
   1. Data types for a table (GALYLEO_STRING, GALYLEO_NUMBER,
      GALYLEO_BOOLEAN, GALYLEO_DATE, GALYLEO_DATETIME,
      GALYLEO_TIME_OF_DAY)

   2. GALYLEO_TYPES: The types in a list

   3. MAXIMUM_DATA_SIZE: Maximum size, in bytes, of a GalyleoTable

   4. MAX_TABLE_ROWS: Maximum number of rows in a GalyleoTable

galyleo.galyleo_constants.GALYLEO_SCHEMA_TYPES = ['string', 'number', 'boolean', 'date', 'datetime', 'timeofday']

   Maximum size of a table sent to the dashboard.  Exceeding this will
   throw a DataSizeExceeded exception

galyleo.galyleo_constants.GALYLEO_TIME_OF_DAY = 'timeofday'

   Types for a chart/dashboard table schema

galyleo.galyleo_constants.MAX_DATA_SIZE = 16777216

   Maximum number of rows in a table


Galyleo Table Server
====================

A GalyleoDataServer class and associated utilities.  The
GalyleoDataServer class is initialized with the table’s schema,
single function,get_rows(), which returns the rows of the table.  To
use a  GalyleoDataServer instance, instantiate it with the schema and
a get_rows() function. The GalyleoDataServer instance can then be
passed to a GalyleoServer with a call to
galyleo_server_framework.add_table_server, and the server will then be
able to serve the tables automatically using the instantiated
GalyleoDataServer.

class galyleo.galyleo_table_server.Filter(filter_spec, columns)

   A Class which implements a Filter used by VirtualGalyleoTable to
   filter rows. The arguments to the contstructor are a filterSpec,
   which is a boolean tree of filters and the columns which the filter
   is implemented over. Note that there is no error-checking here: it
   is assumed that the dashboard widgets will only select columns
   which appear in the tables, of the right type, and so on. This is
   designed to be instantiated from
   VirtualGalyleoTable.get_filtered_rows() and in no other place –
   error checking, if any, should be done there.

   Arguments:
      filter_spec: a Specification of the filter as a dictionary.
      columns: the names of the columns (names alone, not types)

   filter(rows)

      Filter the rows according to the specification given to the
      constructor. Returns the rows for which the filter returns True.

      Arguments:
         rows: list of list of values, in the same order as the
         columns

      Returns:
         subset of the rows, which pass the filter

class galyleo.galyleo_table_server.GalyleoDataServer(schema, get_rows)

   A Galyleo Data Server: This is instantiated with a function
   get_rows() which  delivers the rows, rather than having them
   explicitly in the Table.  Note that get_rows() *must* return the
   appropriate number of columns of the appropriate types.

   Arguments:
      schema: a list of records of the form {“name”: <column_name,
      “type”: <column_type>}.
         The column_type must be a type from
         galyleo_constants.GALYLEO_TYPES.

      get_rows: a function which returns a list of list of values.
      Each component list
         must have the same length as schema, and the jth element must
         be of the type specified in the jth element of schema

   all_values(column_name: str)

      get all the values from column_name

      Arguments:
         column_name: name of the column to get the values for

      Returns:
         List of the values

   get_column_type(column_name)

      Returns the type of column column_name, or None if this table
      doesn’t have a column with that name.

      Arguments:
         column_name: name of the column to get the type for

   get_filtered_rows(filter_spec)

      Filter the rows according to the specification given by
      filter_spec. Returns the rows for which the resulting filter
      returns True.

      Arguments:
         filter_spec: Specification of the filter, as a dictionary

      Returns:
         The subset of self.get_rows() which pass the filter

   numeric_spec(column_name: str)

      get the dictionary {min_val, max_val, increment} for column_name

      Arguments:
         column_name: name of the column to get the numeric spec for

      Returns:
         the minimum, maximum, and increment of the column

galyleo.galyleo_table_server.check_valid_spec(filter_spec)

   Class method which checks to make sure that a filter spec is valid.
   Does not return, but throws an InvalidDataException with an error
   message if the filter spec is invalid

   Arguments:
      filter_spec: spec to test for validity


Galyleo Server Framework
========================

A framework to easily and quickly implement a web server which serves
tables according to the Galyleo URL protocol.  This implements the URL
methods get_filtered_rows, get_all_values, and get_numeric_spec.  It
parses the arguments, checking for errors, takes the table argument,
looks up the appropriate GalyleoDataServer to serve for that table,
and then calls the method on that server to serve the request.  If no
exception is thrown, returns a 200 with the result as a JSON
structure, and if an exception is thrown, returns a 400 with an
approrpriate error message. All of the methods here except for
add_table_server are simply route targets: none are designed for calls
from any method other than flask

galyleo.galyleo_server_framework.add_table_server(table_name, galyleo_data_server, dashboard_name=None)

   Register a GalyleoDataServer to serve data for a specific table
   name, and, optionally, dashboard_name if it is supplied.   Raises
   an InvalidDataException if table_name is None or
   galyleo_data_server is None or is not an instance of
   GalyleoDataServer.

   Arguments:
      table_name: name to register the server for galyleo_data_server:
      an instange of GalyleoDataServer which services the requests
      dashboard_name: name of the dashboard (optional, None if not
      supplied)

galyleo.galyleo_server_framework.echo_headers()

   Echo the headers back, for debugging

   Arguments:
      None

galyleo.galyleo_server_framework.get_all_values()

   Target for the /get_all_values route.  Makes sure that column_name
   is specified in the call, and that if table_name is present, it is
   registered, then returns the distinct values as a JSONified list.
   Uses server.get_all_values(column_name) to get the values.  Aborts
   with a 400 for missing arguments, bad table name, or if there is no
   column_name in the arguments.

   Arguments:
      None

galyleo.galyleo_server_framework.get_filtered_rows()

   Get the filtered rows from a request.  In the initializer, this was
   registered for the /get_filtered_rows route.  Gets the filter_spec
   from the Filter-Spec header variable If there is no filter_spec,
   returns all rows using server.get_rows().  Aborts with a 400 if
   there is no table_name, or if check_valid_spec or get_filtered_rows
   throws an InvalidDataException, or if the filter_spec is not valid
   JSON.

   Arguments:
      None

   Returns:
      The filtered rows as a JSONified list of lists

galyleo.galyleo_server_framework.get_numeric_spec()

   Target for the /get_numeric_spec route.  Makes sure that
   column_name is specified in the call, and that if table_name is
   present, it is registered, then returns the numeric spec
   {“min_val”, “max_val”, “increment”} as a JSONified dictionary.
   Uses server.get_numeric_spec(column_name) to create the numeric
   spec.  Aborts with a 400 for missing arguments, bad table name, or
   if there is no column_name in the arguments.

   Arrguments:
      None

galyleo.galyleo_server_framework.get_tables()

   Target for the /get_tables route.  Dumps a JSONIfied dictionary of
   the form: {table_name: <table_schema>}, where <table_schema> is a
   dictionary {“name”: name, “type”: type}

   Arguments:
      None

galyleo.galyleo_server_framework.hello()

   Just a simple get target to make sure that the framework is working

   Arguments:
      None

galyleo.galyleo_server_framework.show_routes()

   Show the API for the table server Arguments: None
